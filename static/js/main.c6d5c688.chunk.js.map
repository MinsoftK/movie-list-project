{"version":3,"sources":["routes/About.js","components/(6)Movie.js","routes/Home.js","routes/Navigation.js","(5)Movies.js","index.js"],"names":["About","Movie","year","title","summary","poster","genres","className","src","alt","map","index","key","slice","prototypes","id","protoTypes","number","isRequired","string","arrayOf","Home","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","kind","medium_cover_image","React","Component","Navigation","to","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAQeA,MALf,WACI,OACA,+D,gGCAJ,SAASC,EAAT,GAAuD,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,OAAOC,EAAQ,EAARA,OAC1C,OACA,yBAAKC,UAAU,SACX,yBAAKA,UAAU,cAAcC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IAC7D,wBAAII,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,cAAcL,GAC5B,wBAAIK,UAAU,sBACTD,EAAOI,KAAI,SAACJ,EAAOK,GAAR,OACR,wBAAIC,IAAKD,EAAOJ,UAAU,eACrBD,OAKb,uBAAGC,UAAU,iBAAiBH,EAAQS,MAAM,EAAE,OAStDZ,EAAMa,WAAW,CACbC,GAAGC,IAAWC,OAAOC,WACrBhB,KAAKc,IAAWC,OAAOC,WACvBf,MAAMa,IAAWG,OAAOD,WACxBd,QAAQY,IAAWG,OAAOD,WAC1Bb,OAAOW,IAAWG,OAAOD,WACzBZ,OAAOU,IAAWI,QAAQJ,IAAWG,QAAQD,YAGlCjB,QCiCAoB,E,4MAjEXC,MAAM,CACFC,WAAU,EACVC,OAAO,I,EAGXC,U,sBAAW,8BAAAC,EAAA,sEACgCC,IAAMC,IAAI,4DAD1C,gBACcJ,EADd,EACAK,KAAOA,KAAOL,OAOtB,EAAKM,SAAS,CAACN,OAAOA,EAAQD,WAAU,IARhC,2C,kEAqBTQ,KAAKN,c,+BAKE,IAAD,EACuBM,KAAKT,MAAzBC,EADH,EACGA,UAAWC,EADd,EACcA,OAClB,OACC,6BACE,6BAASjB,UAAU,aACrBgB,EAEK,yBAAKhB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAMF,yBAAKA,UAAU,UACdiB,EAAOd,KAAK,SAAAsB,GAAI,OAChB,kBAAC,EAAD,CACCpB,IAAKoB,EAAKjB,GACVA,GAAIiB,EAAKjB,GACTb,KAAM8B,EAAK9B,KACXC,MAAO6B,EAAK7B,MACZC,QAAS4B,EAAK5B,QACdC,OAAQ2B,EAAKC,mBACb3B,OAAQ0B,EAAK1B,mB,GAvDV4B,IAAMC,WCMVC,MARf,WACI,OACA,6BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCWOC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWpB,IACxC,kBAAC,IAAD,CAAOkB,KAAK,SAASE,UAAWzC,MCPtC0C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c6d5c688.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction About(){\r\n    return (\r\n    <span>About this Page: I built it </span>\r\n    );\r\n}\r\nexport default About;","import React from 'react'\nimport protoTypes from 'prop-types'\nimport './style.css'\n\n//state가 필요 없는 경우에는 class로 작성할 필요가 없다.\nfunction Movie({ year, title, summary, poster,genres}){\n    return (\n    <div className=\"movie\">\n        <img className=\"movie_image\" src={poster} alt={title} title={title}/>\n        <h3 className=\"movie_title\">{title}</h3>\n        <h5 className=\"movie_year\">{year}</h5>\n        <ul className=\"movie_genres_Array\">            \n            {genres.map((genres,index) =>(\n                <li key={index} className=\"movie_genre\">\n                    {genres}\n                </li>\n            )//넣을만한 key가 없지만 map에서 제공하는 index를 이용해서 넣을 수 있다.\n        ) }\n        </ul>\n        <p className=\"movie_summary\">{summary.slice(0,140)}</p>\n    \n    </div>\n    );\n}\n// pros {} 를 빼먹음....\n//map( kind => ()\n//자바스크립트에서의 for는 loop이다 따라서 htmlfor라고 써한다.\n\nMovie.prototypes={\n    id:protoTypes.number.isRequired,\n    year:protoTypes.number.isRequired,\n    title:protoTypes.string.isRequired,\n    summary:protoTypes.string.isRequired,\n    poster:protoTypes.string.isRequired,\n    genres:protoTypes.arrayOf(protoTypes.string).isRequired\n}\n\nexport default Movie;\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from '../components/(6)Movie';\r\n\r\nclass Home extends React.Component{\r\n    state={\r\n        isLoading:true,\r\n        movies:[]\r\n    };\r\n\r\n    getMovies= async() => {\r\n        const {data: {data :{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        //console.log(movies);\r\n        //console.log(movies.data.data.movies)\r\n        //This is not sexy\r\n        //so we applying ES6 like that.\r\n       \r\n        //this.setState({movies:movies});\r\n       this.setState({movies:movies, isLoading:false})\r\n    }\r\n    //axios를 기다려야 된다는 것을 js에 알려준다.\r\n  componentDidMount(){\r\n    //   setTimeout(()=>{\r\n    //       this.setState({isLoading:false, book:true })\r\n    //   },6000)\r\n      //movies array에 book이 없더라도 오류는 나지 않는다.\r\n      //미래 지향적 state설정\r\n\r\n      //사람들이 자바스크립트에서 data를 fetch를 하는 방법은 FETch를 사용하는 것\r\n      //하지만 Axios라는 좋은 방법이 존재한다. \r\n      //Fetch위에 존재하는 작은 layer\r\n      this.getMovies();\r\n    }\r\n\r\n    //JSX 문법이므로 {} 안에 들어가야 한다. \r\n    //state변수 movies를 갖고옴으로 아래의 this.state.moveis => movies로 줄일 수 있다.\r\n    render(){\r\n        const {isLoading, movies }=this.state; //ES6\r\n        return (\r\n         <div>\r\n           <section className=\"container\">\r\n        {isLoading \r\n              ?\r\n              <div className=\"loader\">\r\n                <span className=\"loader__text\">\r\n                  Loading...\r\n                </span>\r\n              </div> \r\n              \r\n              :\r\n              <div className=\"movies\">\r\n              {movies.map( kind => \r\n               <Movie \r\n                key={kind.id}\r\n                id={kind.id} \r\n                year={kind.year} \r\n                title={kind.title} \r\n                summary={kind.summary} \r\n                poster={kind.medium_cover_image} \r\n                genres={kind.genres}\r\n                />\r\n              )}</div>//왜 {} 로 movie.map 부터 컴포넌트를 감싸야하나?  \r\n                    // () => ()\r\n        }  \r\n          </section>\r\n        </div>\r\n                );     \r\n    }\r\n  }\r\n                       \r\nexport default Home;\r\n        //\"Loading..\" :\"we are ready\" 부분을 바꾼다.\r\n/*\r\n        Destructuring Object\r\n        객체에서도 필요한 데이터만 뽑아서 변수로 할당할 수 있다.\r\n        \r\n            let obj = {\r\n              name: 'godori',\r\n              address: 'Guldari',\r\n              age: 17\r\n            }\r\n            \r\n            // 객체의 키 이름 값으로 새로운 변수 만들기\r\n            let {name, age} = obj;\r\n            \r\n            // 다른 변수 이름으로 객체의 값을 할당 받기\r\n            let {name:myName, age:myAge} = obj;\r\n            \r\n            console.log(name, age, myName, myAge); // godori, 17, godori, 17\r\n*/\r\n\r\n//setstate로 rendering을 해야만 비동기처리를 할 수 있다. \r\n\r\n//자바스크립트 클래스안에 있으면 컴포넌트 클래스에 의해 혼란스러워진다. 그래서 항상 className 으로 하는 것을 잊지 말자. ","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nfunction Navigation(){\r\n    return( \r\n    <div>\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link>\r\n    </div>\r\n    );\r\n}\r\nexport default Navigation;","import React from 'react';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from './routes/Home';\nimport Navigation from './routes/Navigation'\n\nfunction App(){\n  return (\n    <HashRouter>\n      <Navigation/>\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About}/>\n    \n    </HashRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Movies from './(5)Movies';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Movies/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}